--- IForgeTagAppender.java
+++ IForgeTagAppender.java
@@ -6,9 +6,11 @@
 package net.minecraftforge.common.extensions;
 
+import io.github.fabricators_of_create.porting_lib.extensions.TagAppenderExtensions;
 import net.minecraft.data.tags.TagsProvider;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.tags.TagKey;
+import xyz.bluspring.kilt.mixin.TagAppenderAccessor;
 
-public interface IForgeTagAppender<T>
+public interface IForgeTagAppender<T> extends TagAppenderExtensions
 {
     private TagsProvider.TagAppender<T> self() {
@@ -16,13 +18,4 @@
     }
 
-    @SuppressWarnings("unchecked")
-    default TagsProvider.TagAppender<T> addTags(TagKey<T>... values) {
-        TagsProvider.TagAppender<T> builder = self();
-        for (TagKey<T> value : values) {
-            builder.addTag(value);
-        }
-        return builder;
-    }
-
     default TagsProvider.TagAppender<T> replace() {
         return replace(true);
@@ -30,5 +23,5 @@
 
     default TagsProvider.TagAppender<T> replace(boolean value) {
-        self().getInternalBuilder().replace(value);
+        ((TagAppenderAccessor) self()).getBuilder().replace(value);
         return self();
     }
@@ -68,5 +61,5 @@
     {
         TagsProvider.TagAppender<T> builder = self();
-        builder.getInternalBuilder().removeElement(location, builder.getModID());
+        ((TagAppenderAccessor) builder).getBuilder().removeElement(location, location.getNamespace());
         return builder;
     }
@@ -95,5 +88,5 @@
     {
         TagsProvider.TagAppender<T> builder = self();
-        builder.getInternalBuilder().removeTag(tag.location(), builder.getModID());
+        ((TagAppenderAccessor) builder).getBuilder().removeTag(tag.location(), tag.location().getNamespace());
         return builder;
     }
