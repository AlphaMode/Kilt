--- ForgeMod.java
+++ ForgeMod.java
@@ -6,4 +6,6 @@
 package net.minecraftforge.common;
 
+import com.jamieswhiteshirt.reachentityattributes.ReachEntityAttributes;
+import io.github.fabricators_of_create.porting_lib.attributes.PortingLibAttributes;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.renderer.BiomeColors;
@@ -115,4 +117,6 @@
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import org.jetbrains.annotations.Nullable;
+import xyz.bluspring.kilt.injections.commands.synchronization.ArgumentTypeInfosInjection;
+import xyz.bluspring.kilt.injections.item.crafting.IngredientInjection;
 
 import java.util.*;
@@ -135,12 +139,12 @@
     @SuppressWarnings({ "unchecked", "rawtypes" })
     private static final RegistryObject<EnumArgument.Info> ENUM_COMMAND_ARGUMENT_TYPE = COMMAND_ARGUMENT_TYPES.register("enum", () ->
-            ArgumentTypeInfos.registerByClass(EnumArgument.class, new EnumArgument.Info()));
+            ArgumentTypeInfosInjection.registerByClass(EnumArgument.class, new EnumArgument.Info()));
     private static final RegistryObject<SingletonArgumentInfo<ModIdArgument>> MODID_COMMAND_ARGUMENT_TYPE = COMMAND_ARGUMENT_TYPES.register("modid", () ->
-            ArgumentTypeInfos.registerByClass(ModIdArgument.class,
+            ArgumentTypeInfosInjection.registerByClass(ModIdArgument.class,
                     SingletonArgumentInfo.contextFree(ModIdArgument::modIdArgument)));
 
-    public static final RegistryObject<Attribute> SWIM_SPEED = ATTRIBUTES.register("swim_speed", () -> new RangedAttribute("forge.swimSpeed", 1.0D, 0.0D, 1024.0D).setSyncable(true));
+    public static final RegistryObject<Attribute> SWIM_SPEED = ATTRIBUTES.kiltRegister("swim_speed", () -> PortingLibAttributes.SWIM_SPEED);
     public static final RegistryObject<Attribute> NAMETAG_DISTANCE = ATTRIBUTES.register("nametag_distance", () -> new RangedAttribute("forge.nameTagDistance", 64.0D, 0.0D, 64.0).setSyncable(true));
-    public static final RegistryObject<Attribute> ENTITY_GRAVITY = ATTRIBUTES.register("entity_gravity", () -> new RangedAttribute("forge.entity_gravity", 0.08D, -8.0D, 8.0D).setSyncable(true));
+    public static final RegistryObject<Attribute> ENTITY_GRAVITY = ATTRIBUTES.kiltRegister("entity_gravity", () -> PortingLibAttributes.ENTITY_GRAVITY);
 
     /**
@@ -150,5 +154,5 @@
      * @see IForgePlayer#canInteractWith(Entity, double)
      */
-    public static final RegistryObject<Attribute> REACH_DISTANCE = ATTRIBUTES.register("reach_distance", () -> new RangedAttribute("generic.reachDistance", 4.5D, 0.0D, 1024.0D).setSyncable(true));
+    public static final RegistryObject<Attribute> REACH_DISTANCE = ATTRIBUTES.kiltRegister("reach_distance", () -> ReachEntityAttributes.REACH);
 
     /**
@@ -157,5 +161,5 @@
      * @see IForgePlayer#canHit(Entity, double)
      */
-    public static final RegistryObject<Attribute> ATTACK_RANGE = ATTRIBUTES.register("attack_range", () -> new RangedAttribute("generic.attack_range", 3.0D, 0.0D, 1024.0D).setSyncable(true));
+    public static final RegistryObject<Attribute> ATTACK_RANGE = ATTRIBUTES.kiltRegister("attack_range", () -> ReachEntityAttributes.ATTACK_RANGE);
 
     /**
@@ -163,5 +167,5 @@
      * @see IForgeEntity#getStepHeight()
      */
-    public static final RegistryObject<Attribute> STEP_HEIGHT_ADDITION = ATTRIBUTES.register("step_height_addition", () -> new RangedAttribute("forge.stepHeight", 0.0D, -512.0D, 512.0D).setSyncable(true));
+    public static final RegistryObject<Attribute> STEP_HEIGHT_ADDITION = ATTRIBUTES.kiltRegister("step_height_addition", () -> PortingLibAttributes.STEP_HEIGHT_ADDITION);
 
     /**
@@ -386,5 +390,5 @@
     private static boolean enableMilkFluid = false;
     private static boolean serverChatPreviewEnabled = false;
-    public static final RegistryObject<FluidType> MILK_TYPE = RegistryObject.createOptional(new ResourceLocation("milk"), ForgeRegistries.Keys.FLUID_TYPES.location(), "minecraft");
+    public static final RegistryObject<FluidType> MILK_TYPE = RegistryObject.createOptional(new ResourceLocation("milk"), ForgeRegistries.Keys.FLUID_TYPES, "minecraft");
     public static final RegistryObject<Fluid> MILK = RegistryObject.create(new ResourceLocation("milk"), ForgeRegistries.FLUIDS);
     public static final RegistryObject<Fluid> FLOWING_MILK = RegistryObject.create(new ResourceLocation("flowing_milk"), ForgeRegistries.FLUIDS);
@@ -468,10 +472,10 @@
         MinecraftForge.EVENT_BUS.addListener(this::registerPermissionNodes);
 
-        ForgeRegistries.ITEMS.tags().addOptionalTagDefaults(Tags.Items.ENCHANTING_FUELS, Set.of(ForgeRegistries.ITEMS.getDelegateOrThrow(Items.LAPIS_LAZULI)));
+        ForgeRegistries.ITEMS.tags().addOptionalTagDefaults(Tags.Items.ENCHANTING_FUELS, Set.of(() -> ForgeRegistries.ITEMS.getDelegateOrThrow(Items.LAPIS_LAZULI).value()));
     }
 
     public void preInit(FMLCommonSetupEvent evt)
     {
-        VersionChecker.startVersionCheck();
+        //VersionChecker.startVersionCheck();
         VanillaPacketSplitter.register();
     }
@@ -488,5 +492,5 @@
     public void mappingChanged(IdMappingEvent evt)
     {
-        Ingredient.invalidateAll();
+        IngredientInjection.invalidateAll();
     }
 
@@ -590,5 +594,5 @@
             CraftingHelper.register(new ResourceLocation("minecraft", "item"), VanillaIngredientSerializer.INSTANCE);
 
-            event.register(ForgeRegistries.Keys.RECIPE_SERIALIZERS, new ResourceLocation("forge", "conditional"), ConditionalRecipe.Serializer::new);
+            //event.register(ForgeRegistries.Keys.RECIPE_SERIALIZERS, new ResourceLocation("forge", "conditional"), ConditionalRecipe.Serializer::new);
         }
     }
@@ -599,6 +603,6 @@
             return;
 
-        event.register(Registry.LOOT_ITEM_REGISTRY, new ResourceLocation("forge:loot_table_id"), () -> LootTableIdCondition.LOOT_TABLE_ID);
-        event.register(Registry.LOOT_ITEM_REGISTRY, new ResourceLocation("forge:can_tool_perform_action"), () -> CanToolPerformAction.LOOT_CONDITION_TYPE);
+        //event.register(Registry.LOOT_ITEM_REGISTRY, new ResourceLocation("forge:loot_table_id"), () -> LootTableIdCondition.LOOT_TABLE_ID);
+        //event.register(Registry.LOOT_ITEM_REGISTRY, new ResourceLocation("forge:can_tool_perform_action"), () -> CanToolPerformAction.LOOT_CONDITION_TYPE);
     }
 
