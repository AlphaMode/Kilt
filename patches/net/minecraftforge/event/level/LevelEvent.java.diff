--- LevelEvent.java
+++ LevelEvent.java
@@ -17,8 +17,11 @@
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.ProgressListener;
+import net.minecraft.util.RandomSource;
 import net.minecraft.util.random.WeightedRandomList;
 import net.minecraft.world.entity.MobCategory;
 import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.StructureManager;
 import net.minecraft.world.level.biome.MobSpawnSettings;
+import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.storage.ServerLevelData;
 import net.minecraftforge.common.ForgeInternalHandler;
@@ -37,4 +40,8 @@
     private final LevelAccessor level;
 
+    public LevelEvent() {
+        level = null;
+    }
+
     public LevelEvent(LevelAccessor level)
     {
@@ -62,4 +69,5 @@
     public static class Load extends LevelEvent
     {
+        public Load() {}
         public Load(LevelAccessor level) { super(level); }
     }
@@ -80,4 +88,5 @@
     public static class Unload extends LevelEvent
     {
+        public Unload() {}
         public Unload(LevelAccessor level) { super(level); }
     }
@@ -95,4 +104,5 @@
     public static class Save extends LevelEvent
     {
+        public Save() {}
         public Save(LevelAccessor level) { super(level); }
     }
@@ -115,4 +125,8 @@
         private final ServerLevelData settings;
 
+        public CreateSpawnPosition() {
+            settings = null;
+        }
+
         public CreateSpawnPosition(LevelAccessor level, ServerLevelData settings)
         {
@@ -132,6 +146,5 @@
      * <p>If an entry is added to the list, it needs to be a globally unique instance.</p>
      *
-     * The event is called in {@link net.minecraft.world.level.NaturalSpawner#mobsAt(ServerLevel,
-     * StructureManager, ChunkGenerator, MobCategory, RandomSource, BlockPos)}.</p>
+     * The event is called in .</p>
      * 
      * <p>This event is {@linkplain Cancelable cancellable}, and does not {@linkplain HasResult have a result}.
@@ -146,4 +159,11 @@
         private final List<MobSpawnSettings.SpawnerData> view;
 
+        public PotentialSpawns() {
+            mobcategory = null;
+            pos = null;
+            list = null;
+            view = null;
+        }
+
         public PotentialSpawns(LevelAccessor level, MobCategory category, BlockPos pos, WeightedRandomList<MobSpawnSettings.SpawnerData> oldList)
         {
